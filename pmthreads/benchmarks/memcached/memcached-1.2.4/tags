!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/missing aclocal-1.15$/;"	m
ACLOCAL	doc/Makefile	/^ACLOCAL = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/missing aclocal-1.15$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	doc/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	doc/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	m
AM_DEFAULT_VERBOSITY	doc/Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	doc/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	doc/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	doc/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/missing autoconf$/;"	m
AUTOCONF	doc/Makefile	/^AUTOCONF = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/missing autoheader$/;"	m
AUTOHEADER	doc/Makefile	/^AUTOHEADER = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/missing automake-1.15$/;"	m
AUTOMAKE	doc/Makefile	/^AUTOMAKE = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/missing automake-1.15$/;"	m
AWK	Makefile	/^AWK = mawk$/;"	m
AWK	doc/Makefile	/^AWK = mawk$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CC	doc/Makefile	/^CC = gcc$/;"	m
CC	pmthreads.mk	/^CC=clang $/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	doc/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	doc/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	pmthreads.mk	/^CFLAGS= -DUSE_THREADS$/;"	m
CHUNK_ALIGN_BYTES	slabs.c	28;"	d	file:
COMMAND_TOKEN	memcached.c	901;"	d	file:
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	doc/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	doc/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = config.h$/;"	m
CONFIG_HEADER	doc/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPP	doc/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	doc/Makefile	/^CPPFLAGS = $/;"	m
CQ	thread.c	/^typedef struct conn_queue CQ;$/;"	t	typeref:struct:conn_queue	file:
CQ_ITEM	thread.c	/^typedef struct conn_queue_item CQ_ITEM;$/;"	t	typeref:struct:conn_queue_item	file:
CSCOPE	Makefile	/^CSCOPE = cscope$/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	doc/Makefile	/^CYGPATH_W = echo$/;"	m
DATA_BUFFER_SIZE	memcached.h	14;"	d
DEBUG_REFCNT	items.c	58;"	d	file:
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I.$/;"	m
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	doc/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	doc/Makefile	/^DEPDIR = .deps$/;"	m
DESTROY	t/lib/MemcachedTest.pm	/^sub DESTROY {$/;"	s
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	doc/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(top_srcdir)\/configure \\$/;"	m
DIST_COMMON	doc/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(am__DIST_COMMON)$/;"	m
DIST_DIRS	Makefile	/^DIST_DIRS = scripts$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(memcached_SOURCES) $(memcached_debug_SOURCES)$/;"	m
DIST_SOURCES	doc/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DIST_TARGETS	Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DONT_PREALLOC_SLABS	slabs.c	29;"	d	file:
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_C	doc/Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	doc/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
ECHO_T	doc/Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	doc/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ENDIAN_LITTLE	config.h	8;"	d
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXEEXT	doc/Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	Makefile	/^EXTRA_DIST = doc scripts TODO t memcached.spec$/;"	m
EXTRA_DIST	doc/Makefile	/^EXTRA_DIST = *.txt$/;"	m
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	doc/Makefile	/^GREP = \/bin\/grep$/;"	m
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
HASH_BIG_ENDIAN	assoc.c	36;"	d	file:
HASH_BIG_ENDIAN	assoc.c	40;"	d	file:
HASH_BIG_ENDIAN	assoc.c	43;"	d	file:
HASH_LITTLE_ENDIAN	assoc.c	35;"	d	file:
HASH_LITTLE_ENDIAN	assoc.c	39;"	d	file:
HASH_LITTLE_ENDIAN	assoc.c	42;"	d	file:
HAVE_DAEMON	config.h	11;"	d
HAVE_INTTYPES_H	config.h	14;"	d
HAVE_MALLOC_H	config.h	17;"	d
HAVE_MEMORY_H	config.h	20;"	d
HAVE_MLOCKALL	config.h	23;"	d
HAVE_STDBOOL_H	config.h	26;"	d
HAVE_STDINT_H	config.h	29;"	d
HAVE_STDLIB_H	config.h	32;"	d
HAVE_STRINGS_H	config.h	35;"	d
HAVE_STRING_H	config.h	38;"	d
HAVE_STRUCT_MALLINFO	config.h	41;"	d
HAVE_SYS_STAT_H	config.h	44;"	d
HAVE_SYS_TYPES_H	config.h	47;"	d
HAVE_UNISTD_H	config.h	50;"	d
HAVE__BOOL	config.h	53;"	d
INS	pmthreads.mk	/^INS= -Xclang -load -Xclang ..\/..\/libs\/libSkeletonPass.so -DHOARD_NVMALLOC -DUSE_SYSTEM_MALLOC$/;"	m
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	doc/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	doc/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	doc/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	doc/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	doc/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	doc/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
IOV_LIST_HIGHWAT	memcached.h	38;"	d
IOV_LIST_INITIAL	memcached.h	30;"	d
IOV_MAX	memcached.c	58;"	d	file:
IOV_MAX	memcached.c	64;"	d	file:
ITEMS_PER_ALLOC	thread.c	25;"	d	file:
ITEM_DELETED	memcached.h	104;"	d
ITEM_LINKED	memcached.h	103;"	d
ITEM_LIST_HIGHWAT	memcached.h	37;"	d
ITEM_LIST_INITIAL	memcached.h	24;"	d
ITEM_SLABBED	memcached.h	107;"	d
ITEM_UPDATE_INTERVAL	items.c	27;"	d	file:
ITEM_data	memcached.h	132;"	d
ITEM_key	memcached.h	128;"	d
ITEM_ntotal	memcached.h	133;"	d
ITEM_suffix	memcached.h	131;"	d
KEY_MAX_LENGTH	memcached.c	904;"	d	file:
KEY_TOKEN	memcached.c	903;"	d	file:
LARGEST_ID	items.c	29;"	d	file:
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	doc/Makefile	/^LDFLAGS = $/;"	m
LIBEVENT_THREAD	thread.c	/^} LIBEVENT_THREAD;$/;"	t	typeref:struct:__anon3	file:
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	doc/Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS = -lpthread  -levent$/;"	m
LIBS	doc/Makefile	/^LIBS = -lpthread  -levent$/;"	m
LINK	Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	doc/Makefile	/^LTLIBOBJS = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/missing makeinfo$/;"	m
MAKEINFO	doc/Makefile	/^MAKEINFO = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/missing makeinfo$/;"	m
MANS	doc/Makefile	/^MANS = $(man_MANS)$/;"	m
MAX_BUCKETS	memcached.h	224;"	d
MAX_SENDBUF_SIZE	memcached.h	18;"	d
MAX_TOKENS	memcached.c	906;"	d	file:
MAX_VERBOSITY_LEVEL	memcached.h	79;"	d
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	doc/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MSG_LIST_HIGHWAT	memcached.h	39;"	d
MSG_LIST_INITIAL	memcached.h	33;"	d
Memcached::Handle	t/lib/MemcachedTest.pm	/^package Memcached::Handle;$/;"	p
MemcachedTest	t/lib/MemcachedTest.pm	/^package MemcachedTest;$/;"	p
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	doc/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	doc/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NREAD_ADD	memcached.h	145;"	d
NREAD_APPEND	memcached.h	148;"	d
NREAD_CAS	memcached.h	150;"	d
NREAD_PREPEND	memcached.h	149;"	d
NREAD_REPLACE	memcached.h	147;"	d
NREAD_SET	memcached.h	146;"	d
NROFF	doc/Makefile	/^NROFF = nroff$/;"	m
NVMALLOC	pmthreads.mk	/^NVMALLOC= $(INS) -DHOARD_NVMALLOC$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OBJEXT	doc/Makefile	/^OBJEXT = o$/;"	m
PACKAGE	Makefile	/^PACKAGE = memcached$/;"	m
PACKAGE	config.h	56;"	d
PACKAGE	doc/Makefile	/^PACKAGE = memcached$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = brad@danga.com$/;"	m
PACKAGE_BUGREPORT	config.h	59;"	d
PACKAGE_BUGREPORT	doc/Makefile	/^PACKAGE_BUGREPORT = brad@danga.com$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = memcached$/;"	m
PACKAGE_NAME	config.h	62;"	d
PACKAGE_NAME	doc/Makefile	/^PACKAGE_NAME = memcached$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = memcached 1.2.4$/;"	m
PACKAGE_STRING	config.h	65;"	d
PACKAGE_STRING	doc/Makefile	/^PACKAGE_STRING = memcached 1.2.4$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = memcached$/;"	m
PACKAGE_TARNAME	config.h	68;"	d
PACKAGE_TARNAME	doc/Makefile	/^PACKAGE_TARNAME = memcached$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	config.h	71;"	d
PACKAGE_URL	doc/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 1.2.4$/;"	m
PACKAGE_VERSION	config.h	74;"	d
PACKAGE_VERSION	doc/Makefile	/^PACKAGE_VERSION = 1.2.4$/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	doc/Makefile	/^PATH_SEPARATOR = :$/;"	m
PMTHREADS	pmthreads.mk	/^PMTHREADS= -rdynamic ..\/..\/libs\/libpmthreads-malloc.so -ldl -lpthread$/;"	m
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	doc/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	doc/Makefile	/^POST_UNINSTALL = :$/;"	m
POWER_BLOCK	slabs.c	27;"	d	file:
POWER_LARGEST	slabs.c	26;"	d	file:
POWER_SMALLEST	slabs.c	25;"	d	file:
PREFIX_HASH_SIZE	stats.c	34;"	d	file:
PREFIX_STATS	stats.c	/^typedef struct _prefix_stats PREFIX_STATS;$/;"	t	typeref:struct:_prefix_stats	file:
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	doc/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	doc/Makefile	/^PRE_UNINSTALL = :$/;"	m
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
READ_BUFFER_HIGHWAT	memcached.h	36;"	d
REALTIME_MAXDELTA	memcached.c	124;"	d	file:
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	doc/Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SHELL	doc/Makefile	/^SHELL = \/bin\/bash$/;"	m
SOURCES	Makefile	/^SOURCES = $(memcached_SOURCES) $(memcached_debug_SOURCES)$/;"	m
SOURCES	doc/Makefile	/^SOURCES =$/;"	m
STATS_LOCK	memcached.h	329;"	d
STATS_LOCK	memcached.h	363;"	d
STATS_UNLOCK	memcached.h	330;"	d
STATS_UNLOCK	memcached.h	364;"	d
STDC_HEADERS	config.h	77;"	d
STRIP	Makefile	/^STRIP = $/;"	m
STRIP	doc/Makefile	/^STRIP = $/;"	m
SUBCOMMAND_TOKEN	memcached.c	902;"	d	file:
SUBDIRS	Makefile	/^SUBDIRS = doc$/;"	m
SUFFIX_LIST_INITIAL	memcached.h	27;"	d
SUFFIX_SIZE	memcached.h	21;"	d
TRANSMIT_COMPLETE	memcached.c	117;"	d	file:
TRANSMIT_HARD_ERROR	memcached.c	120;"	d	file:
TRANSMIT_INCOMPLETE	memcached.c	118;"	d	file:
TRANSMIT_SOFT_ERROR	memcached.c	119;"	d	file:
UDP_HEADER_SIZE	memcached.h	17;"	d
UDP_MAX_PAYLOAD_SIZE	memcached.h	16;"	d
UDP_READ_BUFFER_SIZE	memcached.h	15;"	d
VERSION	Makefile	/^VERSION = 1.2.4$/;"	m
VERSION	config.h	83;"	d
VERSION	doc/Makefile	/^VERSION = 1.2.4$/;"	m
_P1003_1B_VISIBLE	memcached.c	29;"	d	file:
__need_IOV_MAX	memcached.c	33;"	d	file:
_hashitem_before	assoc.c	/^static item** _hashitem_before (const char *key, const size_t nkey) {$/;"	f	file:
_prefix_stats	stats.c	/^struct _prefix_stats {$/;"	s	file:
_stritem	memcached.h	/^typedef struct _stritem {$/;"	s
abs_builddir	Makefile	/^abs_builddir = \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4$/;"	m
abs_builddir	doc/Makefile	/^abs_builddir = \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/doc$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4$/;"	m
abs_srcdir	doc/Makefile	/^abs_srcdir = \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/doc$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4$/;"	m
abs_top_builddir	doc/Makefile	/^abs_top_builddir = \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4$/;"	m
abs_top_srcdir	doc/Makefile	/^abs_top_srcdir = \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	doc/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_member	configure	/^ac_fn_c_check_member ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
accept_new_conns	memcached.c	/^void accept_new_conns(const bool do_accept) {$/;"	f
access	memcached.h	/^    int access;  \/* access mask (a la chmod) for unix domain socket *\/$/;"	m	struct:settings
add_delta	memcached.h	303;"	d
add_delta	memcached.h	334;"	d
add_iov	memcached.c	/^static int add_iov(conn *c, const void *buf, int len) {$/;"	f	file:
add_msghdr	memcached.c	/^static int add_msghdr(conn *c)$/;"	f	file:
aix_post_process_depfile	depcomp	/^aix_post_process_depfile ()$/;"	f
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__DIST_COMMON	Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/config.h.in AUTHORS \\$/;"	m
am__DIST_COMMON	doc/Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__aclocal_m4_deps	doc/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__base_list	doc/Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	doc/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	doc/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	doc/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__distuninstallcheck_listfiles	Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__include	doc/Makefile	/^am__include = include$/;"	m
am__install_max	doc/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__installdirs	doc/Makefile	/^am__installdirs = "$(DESTDIR)$(man1dir)"$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = { \\$/;"	m
am__is_gnu_make	doc/Makefile	/^am__is_gnu_make = { \\$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	doc/Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	doc/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	doc/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	doc/Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	doc/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	doc/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	doc/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__objects_1	Makefile	/^am__objects_1 = memcached.$(OBJEXT) slabs.$(OBJEXT) items.$(OBJEXT) \\$/;"	m
am__post_remove_distdir	Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__quote	doc/Makefile	/^am__quote = $/;"	m
am__recursive_targets	Makefile	/^am__recursive_targets = \\$/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__strip_dir	doc/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\$/;"	m
am__tagged_files	doc/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	doc/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uninstall_files_from_dir	doc/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	doc/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	doc/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	doc/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	doc/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	doc/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	doc/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	doc/Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	doc/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	doc/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	doc/Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am__vpath_adj	doc/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	doc/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_memcached_OBJECTS	Makefile	/^am_memcached_OBJECTS = memcached-memcached.$(OBJEXT) \\$/;"	m
am_memcached_debug_OBJECTS	Makefile	/^am_memcached_debug_OBJECTS = $(am__objects_1)$/;"	m
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
assoc_delete	assoc.c	/^void assoc_delete(const char *key, const size_t nkey) {$/;"	f
assoc_expand	assoc.c	/^static void assoc_expand(void) {$/;"	f	file:
assoc_find	assoc.c	/^item *assoc_find(const char *key, const size_t nkey) {$/;"	f
assoc_init	assoc.c	/^void assoc_init(void) {$/;"	f
assoc_insert	assoc.c	/^int assoc_insert(item *it) {$/;"	f
assoc_move_next_bucket	memcached.h	304;"	d
assoc_move_next_bucket	memcached.h	335;"	d
base	thread.c	/^    struct event_base *base;    \/* libevent handle this thread uses *\/$/;"	m	struct:__anon3	typeref:struct:__anon3::event_base	file:
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = memcached$(EXEEXT) memcached-debug$(EXEEXT)$/;"	m
binary	memcached.h	/^    int    binary;    \/* are we in binary mode *\/$/;"	m	struct:__anon2
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	doc/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bool	memcached.h	/^  typedef enum {false = 0, true = 1} bool;$/;"	t	typeref:enum:__anon1
bucket	memcached.h	/^    int    bucket;    \/* bucket number for the next command, if running as$/;"	m	struct:__anon2
buckets	memcached.c	/^static int *buckets = 0; \/* bucket->generation array for a managed instance *\/$/;"	v	file:
build	Makefile	/^build = x86_64-pc-linux-gnu$/;"	m
build	doc/Makefile	/^build = x86_64-pc-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_alias	doc/Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	doc/Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_os	doc/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-pc-linux-gnu$/;"	m
build_triplet	doc/Makefile	/^build_triplet = x86_64-pc-linux-gnu$/;"	m
build_udp_headers	memcached.c	/^static int build_udp_headers(conn *c) {$/;"	f	file:
build_vendor	Makefile	/^build_vendor = pc$/;"	m
build_vendor	doc/Makefile	/^build_vendor = pc$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
builddir	doc/Makefile	/^builddir = .$/;"	m
bytes_read	memcached.h	/^    uint64_t      bytes_read;$/;"	m	struct:stats
bytes_written	memcached.h	/^    uint64_t      bytes_written;$/;"	m	struct:stats
cache_lock	thread.c	/^static pthread_mutex_t cache_lock;$/;"	v	file:
cas_id	memcached.h	/^    uint64_t        cas_id;     \/* the CAS identifier *\/$/;"	m	struct:_stritem
chunk_size	memcached.h	/^    int chunk_size;$/;"	m	struct:settings
clock_handler	memcached.c	/^static void clock_handler(const int fd, const short which, void *arg) {$/;"	f	file:
clockevent	memcached.c	/^static struct event clockevent;$/;"	v	typeref:struct:event	file:
complete_nread	memcached.c	/^static void complete_nread(conn *c) {$/;"	f	file:
cond	thread.c	/^    pthread_cond_t  cond;$/;"	m	struct:conn_queue	file:
conn	memcached.h	/^} conn;$/;"	t	typeref:struct:__anon2
conn_add_to_freelist	memcached.h	306;"	d
conn_add_to_freelist	memcached.h	337;"	d
conn_cleanup	memcached.c	/^static void conn_cleanup(conn *c) {$/;"	f	file:
conn_close	memcached.c	/^static void conn_close(conn *c) {$/;"	f	file:
conn_closing	memcached.h	/^    conn_closing,    \/** closing this connection *\/$/;"	e	enum:conn_states
conn_free	memcached.c	/^void conn_free(conn *c) {$/;"	f
conn_from_freelist	memcached.h	305;"	d
conn_from_freelist	memcached.h	336;"	d
conn_init	memcached.c	/^static void conn_init(void) {$/;"	f	file:
conn_listening	memcached.h	/^    conn_listening,  \/** the socket which listens for connections *\/$/;"	e	enum:conn_states
conn_lock	thread.c	/^static pthread_mutex_t conn_lock;$/;"	v	file:
conn_mwrite	memcached.h	/^    conn_mwrite,     \/** writing out many items sequentially *\/$/;"	e	enum:conn_states
conn_new	memcached.c	/^conn *conn_new(const int sfd, const int init_state, const int event_flags,$/;"	f
conn_nread	memcached.h	/^    conn_nread,      \/** reading in a fixed number of bytes *\/$/;"	e	enum:conn_states
conn_queue	thread.c	/^struct conn_queue {$/;"	s	file:
conn_queue_item	thread.c	/^struct conn_queue_item {$/;"	s	file:
conn_read	memcached.h	/^    conn_read,       \/** reading in a command line *\/$/;"	e	enum:conn_states
conn_set_state	memcached.c	/^static void conn_set_state(conn *c, int state) {$/;"	f	file:
conn_shrink	memcached.c	/^static void conn_shrink(conn *c) {$/;"	f	file:
conn_states	memcached.h	/^enum conn_states {$/;"	g
conn_structs	memcached.h	/^    unsigned int  conn_structs;$/;"	m	struct:stats
conn_swallow	memcached.h	/^    conn_swallow,    \/** swallowing unnecessary bytes w\/o storing *\/$/;"	e	enum:conn_states
conn_write	memcached.h	/^    conn_write,      \/** writing out a simple response *\/$/;"	e	enum:conn_states
cq_init	thread.c	/^static void cq_init(CQ *cq) {$/;"	f	file:
cq_peek	thread.c	/^static CQ_ITEM *cq_peek(CQ *cq) {$/;"	f	file:
cq_pop	thread.c	/^static CQ_ITEM *cq_pop(CQ *cq) {$/;"	f	file:
cq_push	thread.c	/^static void cq_push(CQ *cq, CQ_ITEM *item) {$/;"	f	file:
cqi_free	thread.c	/^static void cqi_free(CQ_ITEM *item) {$/;"	f	file:
cqi_freelist	thread.c	/^static CQ_ITEM *cqi_freelist;$/;"	v	file:
cqi_freelist_lock	thread.c	/^static pthread_mutex_t cqi_freelist_lock;$/;"	v	file:
cqi_new	thread.c	/^static CQ_ITEM *cqi_new() {$/;"	f	file:
create_worker	thread.c	/^static void create_worker(void *(*func)(void *), void *arg) {$/;"	f	file:
curr_bytes	memcached.h	/^    uint64_t      curr_bytes;$/;"	m	struct:stats
curr_conns	memcached.h	/^    unsigned int  curr_conns;$/;"	m	struct:stats
curr_items	memcached.h	/^    unsigned int  curr_items;$/;"	m	struct:stats
current_test	stats.c	/^static char *current_test = "";$/;"	v	file:
current_time	memcached.c	/^volatile rel_time_t current_time;$/;"	v
daemon	daemon.c	/^int daemon(int nochdir, int noclose)$/;"	f
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	doc/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	doc/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
defer_delete	memcached.h	309;"	d
defer_delete	memcached.h	340;"	d
delcurr	memcached.c	/^static int delcurr;$/;"	v	file:
delete_handler	memcached.c	/^static void delete_handler(const int fd, const short which, void *arg) {$/;"	f	file:
deleteevent	memcached.c	/^static struct event deleteevent;$/;"	v	typeref:struct:event	file:
deltotal	memcached.c	/^static int deltotal;$/;"	v	file:
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
detail_enabled	memcached.h	/^    int detail_enabled;     \/* nonzero if we're collecting detailed stats *\/$/;"	m	struct:settings
dispatch_conn_new	memcached.h	341;"	d
dispatch_conn_new	thread.c	/^void dispatch_conn_new(int sfd, int init_state, int event_flags,$/;"	f
dispatch_event_add	memcached.h	342;"	d
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
do_add_delta	memcached.c	/^char *do_add_delta(item *it, const bool incr, const int64_t delta, char *buf) {$/;"	f
do_assoc_move_next_bucket	assoc.c	/^void do_assoc_move_next_bucket(void) {$/;"	f
do_conn_add_to_freelist	memcached.c	/^bool do_conn_add_to_freelist(conn *c) {$/;"	f
do_conn_from_freelist	memcached.c	/^conn *do_conn_from_freelist() {$/;"	f
do_defer_delete	memcached.c	/^char *do_defer_delete(item *it, time_t exptime)$/;"	f
do_item_alloc	items.c	/^item *do_item_alloc(char *key, const size_t nkey, const int flags, const rel_time_t exptime, const int nbytes) {$/;"	f
do_item_cachedump	items.c	/^char *do_item_cachedump(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes) {$/;"	f
do_item_flush_expired	items.c	/^void do_item_flush_expired(void) {$/;"	f
do_item_get_nocheck	items.c	/^item *do_item_get_nocheck(const char *key, const size_t nkey) {$/;"	f
do_item_get_notedeleted	items.c	/^item *do_item_get_notedeleted(const char *key, const size_t nkey, bool *delete_locked) {$/;"	f
do_item_link	items.c	/^int do_item_link(item *it) {$/;"	f
do_item_remove	items.c	/^void do_item_remove(item *it) {$/;"	f
do_item_replace	items.c	/^int do_item_replace(item *it, item *new_it) {$/;"	f
do_item_stats	items.c	/^char *do_item_stats(int *bytes) {$/;"	f
do_item_stats_sizes	items.c	/^char* do_item_stats_sizes(int *bytes) {$/;"	f
do_item_unlink	items.c	/^void do_item_unlink(item *it) {$/;"	f
do_item_update	items.c	/^void do_item_update(item *it) {$/;"	f
do_run_deferred_deletes	memcached.c	/^void do_run_deferred_deletes(void)$/;"	f
do_slabs_alloc	slabs.c	/^void *do_slabs_alloc(const size_t size) {$/;"	f
do_slabs_free	slabs.c	/^void do_slabs_free(void *ptr, const size_t size) {$/;"	f
do_slabs_newslab	slabs.c	/^static int do_slabs_newslab(const unsigned int id) {$/;"	f	file:
do_slabs_reassign	slabs.c	/^int do_slabs_reassign(unsigned char srcid, unsigned char dstid) {$/;"	f
do_slabs_stats	slabs.c	/^char* do_slabs_stats(int *buflen) {$/;"	f
do_store_item	memcached.c	/^int do_store_item(item *it, int comm) {$/;"	f
do_suffix_add_to_freelist	memcached.c	/^bool do_suffix_add_to_freelist(char *s) {$/;"	f
do_suffix_from_freelist	memcached.c	/^char *do_suffix_from_freelist() {$/;"	f
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	doc/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
drive_machine	memcached.c	/^static void drive_machine(conn *c) {$/;"	f	file:
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	doc/Makefile	/^dvidir = ${docdir}$/;"	m
end	memcached.h	/^    void * end[];$/;"	m	struct:_stritem
end_page_free	slabs.c	/^    unsigned int end_page_free; \/* number of items remaining at end of last alloced page *\/$/;"	m	struct:__anon4	file:
end_page_ptr	slabs.c	/^    void *end_page_ptr;         \/* pointer to next free item at end of page, or 0 *\/$/;"	m	struct:__anon4	file:
ensure_iov_space	memcached.c	/^static int ensure_iov_space(conn *c) {$/;"	f	file:
ev_flags	memcached.h	/^    short  ev_flags;$/;"	m	struct:__anon2
event	memcached.h	/^    struct event event;$/;"	m	struct:__anon2	typeref:struct:__anon2::event
event_flags	thread.c	/^    int     event_flags;$/;"	m	struct:conn_queue_item	file:
event_handler	memcached.c	/^void event_handler(const int fd, const short which, void *arg) {$/;"	f
event_init	configure	/^ event_init();$/;"	f
evict_to_free	memcached.h	/^    int evict_to_free;$/;"	m	struct:settings
evictions	memcached.h	/^    uint64_t      evictions;$/;"	m	struct:stats
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	doc/Makefile	/^exec_prefix = ${prefix}$/;"	m
expand_bucket	assoc.c	/^static unsigned int expand_bucket = 0;$/;"	v	file:
expanding	assoc.c	/^static bool expanding = false;$/;"	v	file:
exptime	memcached.h	/^    rel_time_t      exptime;    \/* expire time *\/$/;"	m	struct:_stritem
factor	memcached.h	/^    double factor;          \/* chunk size growth factor *\/$/;"	m	struct:settings
fail	stats.c	/^static void fail(char *what) { printf("\\tFAIL: %s\\n", what); fflush(stdout); fail_count++; }$/;"	f	file:
fail_count	stats.c	/^static int fail_count = 0;$/;"	v	file:
false	memcached.h	/^  typedef enum {false = 0, true = 1} bool;$/;"	e	enum:__anon1
final	assoc.c	128;"	d	file:
free_port	t/lib/MemcachedTest.pm	/^sub free_port {$/;"	s
freeconns	memcached.c	/^static conn **freeconns;$/;"	v	file:
freecurr	memcached.c	/^static int freecurr;$/;"	v	file:
freesuffix	memcached.c	/^static char **freesuffix;$/;"	v	file:
freesuffixcurr	memcached.c	/^static int freesuffixcurr;$/;"	v	file:
freesuffixtotal	memcached.c	/^static int freesuffixtotal;$/;"	v	file:
freetotal	memcached.c	/^static int freetotal;$/;"	v	file:
func_cl_dashL	compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	compile	/^func_cl_wrapper ()$/;"	f
func_file_conv	compile	/^func_file_conv ()$/;"	f
gen	memcached.h	/^    int    gen;       \/* generation requested for the bucket *\/$/;"	m	struct:__anon2
get_cas_id	items.c	/^uint64_t get_cas_id() {$/;"	f
get_cmds	memcached.h	/^    uint64_t      get_cmds;$/;"	m	struct:stats
get_hits	memcached.h	/^    uint64_t      get_hits;$/;"	m	struct:stats
get_misses	memcached.h	/^    uint64_t      get_misses;$/;"	m	struct:stats
give_advice	missing	/^give_advice ()$/;"	f
grow_slab_list	slabs.c	/^static int grow_slab_list (const unsigned int id) {$/;"	f	file:
h_next	memcached.h	/^    struct _stritem *h_next;    \/* hash chain next *\/$/;"	m	struct:_stritem	typeref:struct:_stritem::_stritem
handle_logfile	scripts/start-memcached	/^	sub handle_logfile$/;"	s
hash	assoc.c	/^uint32_t hash( const void *key, size_t length, const uint32_t initval)$/;"	f
hash	assoc.c	/^uint32_t hash($/;"	f
hash_items	assoc.c	/^static unsigned int hash_items = 0;$/;"	v	file:
hashmask	assoc.c	455;"	d	file:
hashpower	assoc.c	/^static unsigned int hashpower = 16;$/;"	v	file:
hashsize	assoc.c	454;"	d	file:
hdrbuf	memcached.h	/^    unsigned char *hdrbuf; \/* udp packet headers *\/$/;"	m	struct:__anon2
hdrsize	memcached.h	/^    int    hdrsize;   \/* number of headers' worth of space is allocated *\/$/;"	m	struct:__anon2
head	thread.c	/^    CQ_ITEM *head;$/;"	m	struct:conn_queue	file:
heads	items.c	/^static item *heads[LARGEST_ID];$/;"	v	file:
hexify	t/udp.t	/^sub hexify {$/;"	s
host	Makefile	/^host = x86_64-pc-linux-gnu$/;"	m
host	doc/Makefile	/^host = x86_64-pc-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_alias	doc/Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	doc/Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_os	doc/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-pc-linux-gnu$/;"	m
host_triplet	doc/Makefile	/^host_triplet = x86_64-pc-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = pc$/;"	m
host_vendor	doc/Makefile	/^host_vendor = pc$/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	doc/Makefile	/^htmldir = ${docdir}$/;"	m
icurr	memcached.h	/^    item   **icurr;$/;"	m	struct:__anon2
ileft	memcached.h	/^    int    ileft;$/;"	m	struct:__anon2
ilist	memcached.h	/^    item   **ilist;   \/* list of items to write out *\/$/;"	m	struct:__anon2
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	doc/Makefile	/^includedir = ${prefix}\/include$/;"	m
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	doc/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init_cond	thread.c	/^static pthread_cond_t init_cond;$/;"	v	file:
init_count	thread.c	/^static int init_count = 0;$/;"	v	file:
init_lock	thread.c	/^static pthread_mutex_t init_lock;$/;"	v	file:
init_state	thread.c	/^    int     init_state;$/;"	m	struct:conn_queue_item	file:
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/install-sh$/;"	m
install_sh	doc/Makefile	/^install_sh = ${SHELL} \/home\/wuzhenwei\/workspace\/bench\/memcached-1.2.4\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	doc/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	doc/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	doc/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
interf	memcached.h	/^    struct in_addr interf;$/;"	m	struct:settings	typeref:struct:settings::in_addr
iov	memcached.h	/^    struct iovec *iov;$/;"	m	struct:__anon2	typeref:struct:__anon2::iovec
iovsize	memcached.h	/^    int    iovsize;   \/* number of elements allocated in iov[] *\/$/;"	m	struct:__anon2
iovused	memcached.h	/^    int    iovused;   \/* number of elements used in iov[] *\/$/;"	m	struct:__anon2
is_listen_thread	memcached.h	310;"	d
is_listen_thread	memcached.h	343;"	d
is_udp	thread.c	/^    int     is_udp;$/;"	m	struct:conn_queue_item	file:
isize	memcached.h	/^    int    isize;$/;"	m	struct:__anon2
it_flags	memcached.h	/^    uint8_t         it_flags;   \/* ITEM_* above *\/$/;"	m	struct:_stritem
item	memcached.h	/^    void   *item;     \/* for commands set\/add\/replace  *\/$/;"	m	struct:__anon2
item	memcached.h	/^} item;$/;"	t	typeref:struct:_stritem
item_alloc	memcached.h	311;"	d
item_alloc	memcached.h	344;"	d
item_cachedump	memcached.h	312;"	d
item_cachedump	memcached.h	345;"	d
item_comm	memcached.h	/^    int    item_comm; \/* which one is it: set\/add\/replace *\/$/;"	m	struct:__anon2
item_delete_lock_over	items.c	/^bool item_delete_lock_over (item *it) {$/;"	f
item_delete_lock_over	memcached.c	/^static bool item_delete_lock_over (item *it) {$/;"	f	file:
item_flush_expired	memcached.h	313;"	d
item_flush_expired	memcached.h	346;"	d
item_free	items.c	/^void item_free(item *it) {$/;"	f
item_get	items.c	/^item *item_get(const char *key, const size_t nkey) {$/;"	f
item_get_notedeleted	memcached.h	314;"	d
item_get_notedeleted	memcached.h	347;"	d
item_init	items.c	/^void item_init(void) {$/;"	f
item_link	memcached.h	315;"	d
item_link	memcached.h	348;"	d
item_link_q	items.c	/^static void item_link_q(item *it) { \/* item is the new head *\/$/;"	f	file:
item_make_header	items.c	/^static size_t item_make_header(const uint8_t nkey, const int flags, const int nbytes,$/;"	f	file:
item_remove	memcached.h	316;"	d
item_remove	memcached.h	349;"	d
item_replace	memcached.h	317;"	d
item_replace	memcached.h	350;"	d
item_size_ok	items.c	/^bool item_size_ok(const size_t nkey, const int flags, const int nbytes) {$/;"	f
item_stats	memcached.h	318;"	d
item_stats	memcached.h	351;"	d
item_stats_sizes	memcached.h	319;"	d
item_stats_sizes	memcached.h	352;"	d
item_unlink	memcached.h	321;"	d
item_unlink	memcached.h	353;"	d
item_unlink_q	items.c	/^static void item_unlink_q(item *it) {$/;"	f	file:
item_update	memcached.h	320;"	d
item_update	memcached.h	354;"	d
key	t/stress-memcached.pl	/^sub key {$/;"	s
killing	slabs.c	/^    unsigned int killing;  \/* index+1 of dying slab, or zero if none *\/$/;"	m	struct:__anon4	file:
l_socket	memcached.c	/^static int l_socket = 0;$/;"	v	file:
last_thread	thread.c	/^static int last_thread = -1;$/;"	v	file:
length	memcached.c	/^    size_t length;$/;"	m	struct:token_s	file:
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	doc/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	doc/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
list_size	slabs.c	/^    unsigned int list_size; \/* size of prev array *\/$/;"	m	struct:__anon4	file:
listen_conn	memcached.c	/^static conn *listen_conn;$/;"	v	file:
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	doc/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	doc/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	thread.c	/^    pthread_mutex_t lock;$/;"	m	struct:conn_queue	file:
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	memcached.c	/^int main (int argc, char **argv) {$/;"	f
main	stats.c	/^main(int argc, char **argv) {$/;"	f
main_base	memcached.c	/^static struct event_base *main_base;$/;"	v	typeref:struct:event_base	file:
make_dummy_depfile	depcomp	/^make_dummy_depfile ()$/;"	f
man1dir	doc/Makefile	/^man1dir = $(mandir)\/man1$/;"	m
man_MANS	doc/Makefile	/^man_MANS = memcached.1$/;"	m
managed	memcached.h	/^    bool managed;          \/* if 1, a tracker manages virtual buckets *\/$/;"	m	struct:settings
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	doc/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
maxbytes	memcached.h	/^    size_t maxbytes;$/;"	m	struct:settings
maxconns	memcached.h	/^    int maxconns;$/;"	m	struct:settings
maximize_sndbuf	memcached.c	/^static void maximize_sndbuf(const int sfd) {$/;"	f	file:
mem_get_is	t/lib/MemcachedTest.pm	/^sub mem_get_is {$/;"	s
mem_gets	t/lib/MemcachedTest.pm	/^sub mem_gets {$/;"	s
mem_gets_is	t/lib/MemcachedTest.pm	/^sub mem_gets_is {$/;"	s
mem_limit	slabs.c	/^static size_t mem_limit = 0;$/;"	v	file:
mem_malloced	slabs.c	/^static size_t mem_malloced = 0;$/;"	v	file:
mem_stats	t/lib/MemcachedTest.pm	/^sub mem_stats {$/;"	s
memcached_CPPFLAGS	Makefile	/^memcached_CPPFLAGS = -DNDEBUG$/;"	m
memcached_DEPENDENCIES	Makefile	/^memcached_DEPENDENCIES = $/;"	m
memcached_LDADD	Makefile	/^memcached_LDADD = $/;"	m
memcached_OBJECTS	Makefile	/^memcached_OBJECTS = $(am_memcached_OBJECTS)$/;"	m
memcached_SOURCES	Makefile	/^memcached_SOURCES = memcached.c slabs.c slabs.h items.c items.h assoc.c assoc.h memcached.h thread.c stats.c stats.h$/;"	m
memcached_debug_DEPENDENCIES	Makefile	/^memcached_debug_DEPENDENCIES = $(memcached_LDADD)$/;"	m
memcached_debug_LDADD	Makefile	/^memcached_debug_LDADD = $(memcached_LDADD)$/;"	m
memcached_debug_OBJECTS	Makefile	/^memcached_debug_OBJECTS = $(am_memcached_debug_OBJECTS)$/;"	m
memcached_debug_SOURCES	Makefile	/^memcached_debug_SOURCES = $(memcached_SOURCES)$/;"	m
mix	assoc.c	93;"	d	file:
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	doc/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	doc/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
msgbytes	memcached.h	/^    int    msgbytes;  \/* number of bytes in current msg *\/$/;"	m	struct:__anon2
msgcurr	memcached.h	/^    int    msgcurr;   \/* element in msglist[] being transmitted now *\/$/;"	m	struct:__anon2
msglist	memcached.h	/^    struct msghdr *msglist;$/;"	m	struct:__anon2	typeref:struct:__anon2::msghdr
msgsize	memcached.h	/^    int    msgsize;   \/* number of elements allocated in msglist[] *\/$/;"	m	struct:__anon2
msgused	memcached.h	/^    int    msgused;   \/* number of elements used in msglist[] *\/$/;"	m	struct:__anon2
mt_add_delta	thread.c	/^char *mt_add_delta(item *item, int incr, const int64_t delta, char *buf) {$/;"	f
mt_assoc_move_next_bucket	thread.c	/^void mt_assoc_move_next_bucket() {$/;"	f
mt_conn_add_to_freelist	thread.c	/^bool mt_conn_add_to_freelist(conn *c) {$/;"	f
mt_conn_from_freelist	thread.c	/^conn *mt_conn_from_freelist() {$/;"	f
mt_defer_delete	thread.c	/^char *mt_defer_delete(item *item, time_t exptime) {$/;"	f
mt_is_listen_thread	thread.c	/^int mt_is_listen_thread() {$/;"	f
mt_item_alloc	thread.c	/^item *mt_item_alloc(char *key, size_t nkey, int flags, rel_time_t exptime, int nbytes) {$/;"	f
mt_item_cachedump	thread.c	/^char *mt_item_cachedump(unsigned int slabs_clsid, unsigned int limit, unsigned int *bytes) {$/;"	f
mt_item_flush_expired	thread.c	/^void mt_item_flush_expired() {$/;"	f
mt_item_get_notedeleted	thread.c	/^item *mt_item_get_notedeleted(const char *key, const size_t nkey, bool *delete_locked) {$/;"	f
mt_item_link	thread.c	/^int mt_item_link(item *item) {$/;"	f
mt_item_remove	thread.c	/^void mt_item_remove(item *item) {$/;"	f
mt_item_replace	thread.c	/^int mt_item_replace(item *old, item *new) {$/;"	f
mt_item_stats	thread.c	/^char *mt_item_stats(int *bytes) {$/;"	f
mt_item_stats_sizes	thread.c	/^char *mt_item_stats_sizes(int *bytes) {$/;"	f
mt_item_unlink	thread.c	/^void mt_item_unlink(item *item) {$/;"	f
mt_item_update	thread.c	/^void mt_item_update(item *item) {$/;"	f
mt_run_deferred_deletes	thread.c	/^void mt_run_deferred_deletes() {$/;"	f
mt_slabs_alloc	thread.c	/^void *mt_slabs_alloc(size_t size) {$/;"	f
mt_slabs_free	thread.c	/^void mt_slabs_free(void *ptr, size_t size) {$/;"	f
mt_slabs_reassign	thread.c	/^int mt_slabs_reassign(unsigned char srcid, unsigned char dstid) {$/;"	f
mt_slabs_stats	thread.c	/^char *mt_slabs_stats(int *buflen) {$/;"	f
mt_stats_lock	stats.c	/^void mt_stats_lock() { }$/;"	f
mt_stats_lock	thread.c	/^void mt_stats_lock() {$/;"	f
mt_stats_unlock	stats.c	/^void mt_stats_unlock() { }$/;"	f
mt_stats_unlock	thread.c	/^void mt_stats_unlock() {$/;"	f
mt_store_item	thread.c	/^int mt_store_item(item *item, int comm) {$/;"	f
mt_suffix_add_to_freelist	thread.c	/^bool mt_suffix_add_to_freelist(char *s) {$/;"	f
mt_suffix_from_freelist	thread.c	/^char *mt_suffix_from_freelist() {$/;"	f
nbytes	memcached.h	/^    int             nbytes;     \/* size of data *\/$/;"	m	struct:_stritem
new	t/lib/MemcachedTest.pm	/^sub new {$/;"	s
new_conn_queue	thread.c	/^    CQ  new_conn_queue;         \/* queue of new connections to handle *\/$/;"	m	struct:__anon3	file:
new_memcached	t/lib/MemcachedTest.pm	/^sub new_memcached {$/;"	s
new_sock	t/lib/MemcachedTest.pm	/^sub new_sock {$/;"	s
new_socket	memcached.c	/^static int new_socket(const bool is_udp) {$/;"	f	file:
new_socket_unix	memcached.c	/^static int new_socket_unix(void) {$/;"	f	file:
new_udp_sock	t/lib/MemcachedTest.pm	/^sub new_udp_sock {$/;"	s
next	memcached.h	/^    struct _stritem *next;$/;"	m	struct:_stritem	typeref:struct:_stritem::_stritem
next	stats.c	/^    PREFIX_STATS *next;$/;"	m	struct:_prefix_stats	file:
next	thread.c	/^    CQ_ITEM *next;$/;"	m	struct:conn_queue_item	file:
nkey	memcached.h	/^    uint8_t         nkey;       \/* key length, w\/terminating null and padding *\/$/;"	m	struct:_stritem
notify_event	thread.c	/^    struct event notify_event;  \/* listen event for notify pipe *\/$/;"	m	struct:__anon3	typeref:struct:__anon3::event	file:
notify_receive_fd	thread.c	/^    int notify_receive_fd;      \/* receiving end of notify pipe *\/$/;"	m	struct:__anon3	file:
notify_send_fd	thread.c	/^    int notify_send_fd;         \/* sending end of notify pipe *\/$/;"	m	struct:__anon3	file:
nsuffix	memcached.h	/^    uint8_t         nsuffix;    \/* length of flags-and-length string *\/$/;"	m	struct:_stritem
num_deletes	stats.c	/^    uint64_t      num_deletes;$/;"	m	struct:_prefix_stats	file:
num_gets	stats.c	/^    uint64_t      num_gets;$/;"	m	struct:_prefix_stats	file:
num_hits	stats.c	/^    uint64_t      num_hits;$/;"	m	struct:_prefix_stats	file:
num_prefixes	stats.c	/^static int num_prefixes = 0;$/;"	v	file:
num_sets	stats.c	/^    uint64_t      num_sets;$/;"	m	struct:_prefix_stats	file:
num_threads	memcached.h	/^    int num_threads;        \/* number of libevent threads to run *\/$/;"	m	struct:settings
old_hashtable	assoc.c	/^static item** old_hashtable = 0;$/;"	v	file:
oldest_live	memcached.h	/^    rel_time_t oldest_live; \/* ignore existing items older than this *\/$/;"	m	struct:settings
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	doc/Makefile	/^oldincludedir = \/usr\/include$/;"	m
out_string	memcached.c	/^static void out_string(conn *c, const char *str) {$/;"	f	file:
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	doc/Makefile	/^pdfdir = ${docdir}$/;"	m
perslab	slabs.c	/^    unsigned int perslab;   \/* how many items per slab *\/$/;"	m	struct:__anon4	file:
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/memcached$/;"	m
pkgdatadir	doc/Makefile	/^pkgdatadir = $(datadir)\/memcached$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/memcached$/;"	m
pkgincludedir	doc/Makefile	/^pkgincludedir = $(includedir)\/memcached$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/memcached$/;"	m
pkglibdir	doc/Makefile	/^pkglibdir = $(libdir)\/memcached$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/memcached$/;"	m
pkglibexecdir	doc/Makefile	/^pkglibexecdir = $(libexecdir)\/memcached$/;"	m
port	memcached.h	/^    int port;$/;"	m	struct:settings
port	t/lib/MemcachedTest.pm	/^sub port { $_[0]{port} }$/;"	s
power_largest	slabs.c	/^static int power_largest;$/;"	v	file:
pre_gdb	memcached.c	/^void pre_gdb(void) {$/;"	f
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prefix	doc/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	stats.c	/^    char         *prefix;$/;"	m	struct:_prefix_stats	file:
prefix_delimiter	memcached.h	/^    char prefix_delimiter;  \/* character that marks a key prefix (for stats) *\/$/;"	m	struct:settings
prefix_len	stats.c	/^    size_t        prefix_len;$/;"	m	struct:_prefix_stats	file:
prefix_stats	stats.c	/^static PREFIX_STATS *prefix_stats[PREFIX_HASH_SIZE];$/;"	v	file:
prev	memcached.h	/^    struct _stritem *prev;$/;"	m	struct:_stritem	typeref:struct:_stritem::_stritem
primary_hashtable	assoc.c	/^static item** primary_hashtable = 0;$/;"	v	file:
process_arithmetic_command	memcached.c	/^static void process_arithmetic_command(conn *c, token_t *tokens, const size_t ntokens, const bool incr) {$/;"	f	file:
process_command	memcached.c	/^static void process_command(conn *c, char *command) {$/;"	f	file:
process_delete_command	memcached.c	/^static void process_delete_command(conn *c, token_t *tokens, const size_t ntokens) {$/;"	f	file:
process_get_command	memcached.c	/^static inline void process_get_command(conn *c, token_t *tokens, size_t ntokens, bool return_cas) {$/;"	f	file:
process_stat	memcached.c	/^static void process_stat(conn *c, token_t *tokens, const size_t ntokens) {$/;"	f	file:
process_stats_detail	memcached.c	/^inline static void process_stats_detail(conn *c, const char *command) {$/;"	f	file:
process_update_command	memcached.c	/^static void process_update_command(conn *c, token_t *tokens, const size_t ntokens, int comm, bool handle_cas) {$/;"	f	file:
process_verbosity_command	memcached.c	/^static void process_verbosity_command(conn *c, token_t *tokens, const size_t ntokens) {$/;"	f	file:
prog	pmthreads.mk	/^prog=pm-memcached$/;"	m
program_details	missing	/^program_details ()$/;"	f
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	doc/Makefile	/^program_transform_name = s,x,x,$/;"	m
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
psdir	Makefile	/^psdir = ${docdir}$/;"	m
psdir	doc/Makefile	/^psdir = ${docdir}$/;"	m
rbuf	memcached.h	/^    char   *rbuf;   \/** buffer to read commands into *\/$/;"	m	struct:__anon2
rbytes	memcached.h	/^    int    rbytes;  \/** how much data, starting from rcur, do we have unparsed *\/$/;"	m	struct:__anon2
rcurr	memcached.h	/^    char   *rcurr;  \/** but if we parsed some already, this is where we stopped *\/$/;"	m	struct:__anon2
read_buffer_size	thread.c	/^    int     read_buffer_size;$/;"	m	struct:conn_queue_item	file:
realtime	memcached.c	/^static rel_time_t realtime(const time_t exptime) {$/;"	f	file:
refcount	memcached.h	/^    unsigned short  refcount;$/;"	m	struct:_stritem
rel_time_t	memcached.h	/^typedef unsigned int rel_time_t;$/;"	t
remove_pidfile	memcached.c	/^static void remove_pidfile(const char *pid_file) {$/;"	f	file:
reopen_logfile	scripts/start-memcached	/^	sub reopen_logfile$/;"	s
request_addr	memcached.h	/^    struct sockaddr request_addr; \/* Who sent the most recent request *\/$/;"	m	struct:__anon2	typeref:struct:__anon2::sockaddr
request_addr_size	memcached.h	/^    socklen_t request_addr_size;$/;"	m	struct:__anon2
request_id	memcached.h	/^    int    request_id; \/* Incoming UDP request ID, if this is a UDP "connection" *\/$/;"	m	struct:__anon2
restart	scripts/memcached.sysv	/^restart () {$/;"	f
ritem	memcached.h	/^    char   *ritem;  \/** when we read in an item's value, it goes here *\/$/;"	m	struct:__anon2
rlbytes	memcached.h	/^    int    rlbytes;$/;"	m	struct:__anon2
rot	assoc.c	47;"	d	file:
rsize	memcached.h	/^    int    rsize;   \/** total allocated size of rbuf *\/$/;"	m	struct:__anon2
run_deferred_deletes	memcached.h	322;"	d
run_deferred_deletes	memcached.h	355;"	d
run_test	stats.c	/^static void run_test(char *what, void (*func)(void)) {$/;"	f	file:
runstatedir	Makefile	/^runstatedir = ${localstatedir}\/run$/;"	m
runstatedir	doc/Makefile	/^runstatedir = ${localstatedir}\/run$/;"	m
save_pid	memcached.c	/^static void save_pid(const pid_t pid, const char *pid_file) {$/;"	f	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	doc/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbytes	memcached.h	/^    int    sbytes;    \/* how many bytes to swallow *\/$/;"	m	struct:__anon2
send_udp_request	t/udp.t	/^sub send_udp_request {$/;"	s
server_socket	memcached.c	/^static int server_socket(const int port, const bool is_udp) {$/;"	f	file:
server_socket_unix	memcached.c	/^static int server_socket_unix(const char *path, int access_mask) {$/;"	f	file:
set_base_from	depcomp	/^set_base_from ()$/;"	f
set_cmds	memcached.h	/^    uint64_t      set_cmds;$/;"	m	struct:stats
set_current_time	memcached.c	/^static void set_current_time(void) {$/;"	f	file:
set_dir_from	depcomp	/^set_dir_from ()$/;"	f
settings	memcached.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	memcached.h	/^struct settings {$/;"	s
settings	stats.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings_init	memcached.c	/^static void settings_init(void) {$/;"	f	file:
setup_thread	thread.c	/^static void setup_thread(LIBEVENT_THREAD *me) {$/;"	f	file:
sfd	memcached.h	/^    int    sfd;$/;"	m	struct:__anon2
sfd	thread.c	/^    int     sfd;$/;"	m	struct:conn_queue_item	file:
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	doc/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sig_handler	memcached.c	/^static void sig_handler(const int sig) {$/;"	f	file:
size	slabs.c	/^    unsigned int size;      \/* sizes of items *\/$/;"	m	struct:__anon4	file:
sizes	items.c	/^static unsigned int sizes[LARGEST_ID];$/;"	v	file:
sl_curr	slabs.c	/^    unsigned int sl_curr;   \/* first free slot *\/$/;"	m	struct:__anon4	file:
sl_total	slabs.c	/^    unsigned int sl_total;  \/* size of previous array *\/$/;"	m	struct:__anon4	file:
slab_list	slabs.c	/^    void **slab_list;       \/* array of slab pointers *\/$/;"	m	struct:__anon4	file:
slabclass	slabs.c	/^static slabclass_t slabclass[POWER_LARGEST + 1];$/;"	v	file:
slabclass_t	slabs.c	/^} slabclass_t;$/;"	t	typeref:struct:__anon4	file:
slabs	slabs.c	/^    unsigned int slabs;     \/* how many slabs were allocated for this class *\/$/;"	m	struct:__anon4	file:
slabs_alloc	memcached.h	323;"	d
slabs_alloc	memcached.h	356;"	d
slabs_clsid	memcached.h	/^    uint8_t         slabs_clsid;\/* which slab class we're in *\/$/;"	m	struct:_stritem
slabs_clsid	slabs.c	/^unsigned int slabs_clsid(const size_t size) {$/;"	f
slabs_free	memcached.h	324;"	d
slabs_free	memcached.h	357;"	d
slabs_init	slabs.c	/^void slabs_init(const size_t limit, const double factor) {$/;"	f
slabs_lock	thread.c	/^static pthread_mutex_t slabs_lock;$/;"	v	file:
slabs_preallocate	slabs.c	/^static void slabs_preallocate (const unsigned int maxslabs) {$/;"	f	file:
slabs_reassign	memcached.h	325;"	d
slabs_reassign	memcached.h	358;"	d
slabs_stats	memcached.h	326;"	d
slabs_stats	memcached.h	359;"	d
sleep	t/lib/MemcachedTest.pm	/^sub sleep {$/;"	s
slots	slabs.c	/^    void **slots;           \/* list of item ptrs *\/$/;"	m	struct:__anon4	file:
sock	t/lib/MemcachedTest.pm	/^sub sock {$/;"	s
socketpath	memcached.h	/^    char *socketpath;   \/* path to unix socket if using local socket *\/$/;"	m	struct:settings
srcdir	Makefile	/^srcdir = .$/;"	m
srcdir	doc/Makefile	/^srcdir = .$/;"	m
start	scripts/memcached.sysv	/^start () {$/;"	f
started	memcached.h	/^    time_t        started;          \/* when the process was started *\/$/;"	m	struct:stats
state	memcached.h	/^    int    state;$/;"	m	struct:__anon2
stats	memcached.c	/^struct stats stats;$/;"	v	typeref:struct:stats
stats	memcached.h	/^struct stats {$/;"	s
stats_init	memcached.c	/^static void stats_init(void) {$/;"	f	file:
stats_lock	thread.c	/^static pthread_mutex_t stats_lock;$/;"	v	file:
stats_prefix_clear	stats.c	/^void stats_prefix_clear() {$/;"	f
stats_prefix_dump	stats.c	/^char *stats_prefix_dump(int *length) {$/;"	f
stats_prefix_find	stats.c	/^static PREFIX_STATS *stats_prefix_find(const char *key) {$/;"	f	file:
stats_prefix_init	stats.c	/^void stats_prefix_init() {$/;"	f
stats_prefix_record_delete	stats.c	/^void stats_prefix_record_delete(const char *key) {$/;"	f
stats_prefix_record_get	stats.c	/^void stats_prefix_record_get(const char *key, const bool is_hit) {$/;"	f
stats_prefix_record_set	stats.c	/^void stats_prefix_record_set(const char *key) {$/;"	f
stats_reset	memcached.c	/^static void stats_reset(void) {$/;"	f	file:
stop	scripts/memcached.sysv	/^stop () {$/;"	f
store_item	memcached.h	327;"	d
store_item	memcached.h	360;"	d
stress	t/stress-memcached.pl	/^sub stress {$/;"	s
subdir	Makefile	/^subdir = .$/;"	m
subdir	doc/Makefile	/^subdir = doc$/;"	m
suffix_add_to_freelist	memcached.h	308;"	d
suffix_add_to_freelist	memcached.h	339;"	d
suffix_from_freelist	memcached.h	307;"	d
suffix_from_freelist	memcached.h	338;"	d
suffix_init	memcached.c	/^static void suffix_init(void) {$/;"	f	file:
suffix_lock	thread.c	/^static pthread_mutex_t suffix_lock;$/;"	v	file:
suffixcurr	memcached.h	/^    char   **suffixcurr;$/;"	m	struct:__anon2
suffixleft	memcached.h	/^    int    suffixleft;$/;"	m	struct:__anon2
suffixlist	memcached.h	/^    char   **suffixlist;$/;"	m	struct:__anon2
suffixsize	memcached.h	/^    int    suffixsize;$/;"	m	struct:__anon2
supports_udp	t/lib/MemcachedTest.pm	/^sub supports_udp {$/;"	s
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	doc/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
tail	thread.c	/^    CQ_ITEM *tail;$/;"	m	struct:conn_queue	file:
tails	items.c	/^static item *tails[LARGEST_ID];$/;"	v	file:
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target	Makefile	/^target = x86_64-pc-linux-gnu$/;"	m
target	doc/Makefile	/^target = x86_64-pc-linux-gnu$/;"	m
target_alias	Makefile	/^target_alias = $/;"	m
target_alias	doc/Makefile	/^target_alias = $/;"	m
target_cpu	Makefile	/^target_cpu = x86_64$/;"	m
target_cpu	doc/Makefile	/^target_cpu = x86_64$/;"	m
target_os	Makefile	/^target_os = linux-gnu$/;"	m
target_os	doc/Makefile	/^target_os = linux-gnu$/;"	m
target_triplet	Makefile	/^target_triplet = x86_64-pc-linux-gnu$/;"	m
target_triplet	doc/Makefile	/^target_triplet = x86_64-pc-linux-gnu$/;"	m
target_vendor	Makefile	/^target_vendor = pc$/;"	m
target_vendor	doc/Makefile	/^target_vendor = pc$/;"	m
test_count	stats.c	/^static int test_count = 0;$/;"	v	file:
test_equals_int	stats.c	/^static void test_equals_int(char *what, int a, int b) { test_count++; if (a != b) fail(what); }$/;"	f	file:
test_equals_ptr	stats.c	/^static void test_equals_ptr(char *what, void *a, void *b) { test_count++; if (a != b) fail(what); }$/;"	f	file:
test_equals_str	stats.c	/^static void test_equals_str(char *what, const char *a, const char *b) { test_count++; if (strcmp(a, b)) fail(what); }$/;"	f	file:
test_equals_ull	stats.c	/^static void test_equals_ull(char *what, uint64_t a, uint64_t b) { test_count++; if (a != b) fail(what); }$/;"	f	file:
test_notequals_ptr	stats.c	/^static void test_notequals_ptr(char *what, void *a, void *b) { test_count++; if (a == b) fail(what); }$/;"	f	file:
test_notnull_ptr	stats.c	/^static void test_notnull_ptr(char *what, void *a) { test_count++; if (NULL == a) fail(what); }$/;"	f	file:
test_prefix_dump	stats.c	/^static void test_prefix_dump() {$/;"	f	file:
test_prefix_find	stats.c	/^static void test_prefix_find() {$/;"	f	file:
test_prefix_record_delete	stats.c	/^static void test_prefix_record_delete() {$/;"	f	file:
test_prefix_record_get	stats.c	/^static void test_prefix_record_get() {$/;"	f	file:
test_prefix_record_set	stats.c	/^static void test_prefix_record_set() {$/;"	f	file:
test_single	t/udp.t	/^sub test_single {$/;"	s
thread_id	thread.c	/^    pthread_t thread_id;        \/* unique ID of this thread *\/$/;"	m	struct:__anon3	file:
thread_init	memcached.h	361;"	d
thread_init	thread.c	/^void thread_init(int nthreads, struct event_base *main_base) {$/;"	f
thread_libevent_process	thread.c	/^static void thread_libevent_process(int fd, short which, void *arg) {$/;"	f	file:
threads	thread.c	/^static LIBEVENT_THREAD *threads;$/;"	v	file:
time	memcached.h	/^    rel_time_t      time;       \/* least recent access *\/$/;"	m	struct:_stritem
todelete	memcached.c	/^static item **todelete = NULL;$/;"	v	file:
token_s	memcached.c	/^typedef struct token_s {$/;"	s	file:
token_t	memcached.c	/^} token_t;$/;"	t	typeref:struct:token_s	file:
tokenize_command	memcached.c	/^static size_t tokenize_command(char *command, token_t *tokens, const size_t max_tokens) {$/;"	f	file:
top_build_prefix	Makefile	/^top_build_prefix = $/;"	m
top_build_prefix	doc/Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_builddir	doc/Makefile	/^top_builddir = ..$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
top_srcdir	doc/Makefile	/^top_srcdir = ..$/;"	m
total_conns	memcached.h	/^    unsigned int  total_conns;$/;"	m	struct:stats
total_items	memcached.h	/^    unsigned int  total_items;$/;"	m	struct:stats
total_prefix_size	stats.c	/^static int total_prefix_size = 0;$/;"	v	file:
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
transform	doc/Makefile	/^transform = $(program_transform_name)$/;"	m
transmit	memcached.c	/^static int transmit(conn *c) {$/;"	f	file:
true	memcached.h	/^  typedef enum {false = 0, true = 1} bool;$/;"	e	enum:__anon1
try_read_command	memcached.c	/^static int try_read_command(conn *c) {$/;"	f	file:
try_read_network	memcached.c	/^static int try_read_network(conn *c) {$/;"	f	file:
try_read_udp	memcached.c	/^static int try_read_udp(conn *c) {$/;"	f	file:
u_socket	memcached.c	/^static int u_socket = -1;$/;"	v	file:
ub1	assoc.c	/^typedef  unsigned       char ub1;   \/* unsigned 1-byte quantities *\/$/;"	t	file:
ub4	assoc.c	/^typedef  unsigned long  int  ub4;   \/* unsigned 4-byte quantities *\/$/;"	t	file:
udp	memcached.h	/^    bool   udp;       \/* is this is a UDP "connection" *\/$/;"	m	struct:__anon2
udpport	memcached.h	/^    int udpport;$/;"	m	struct:settings
udpport	t/lib/MemcachedTest.pm	/^sub udpport { $_[0]{udpport} }$/;"	s
uint8_t	memcached.h	/^ typedef unsigned char             uint8_t;$/;"	t
update_event	memcached.c	/^static bool update_event(conn *c, const int new_flags) {$/;"	f	file:
usage	memcached.c	/^static void usage(void) {$/;"	f	file:
usage_license	memcached.c	/^static void usage_license(void) {$/;"	f	file:
value	memcached.c	/^    char *value;$/;"	m	struct:token_s	file:
verbose	memcached.h	/^    int verbose;$/;"	m	struct:settings
wait_for_early_second	t/expirations.t	/^sub wait_for_early_second {$/;"	s
wbuf	memcached.h	/^    char   *wbuf;$/;"	m	struct:__anon2
wbytes	memcached.h	/^    int    wbytes;$/;"	m	struct:__anon2
wcurr	memcached.h	/^    char   *wcurr;$/;"	m	struct:__anon2
which	memcached.h	/^    short  which;   \/** which events were just triggered *\/$/;"	m	struct:__anon2
worker_libevent	thread.c	/^static void *worker_libevent(void *arg) {$/;"	f	file:
write_and_free	memcached.c	/^static void write_and_free(conn *c, char *buf, int bytes) {$/;"	f	file:
write_and_free	memcached.h	/^    void   *write_and_free; \/** free this memory after finishing writing *\/$/;"	m	struct:__anon2
write_and_go	memcached.h	/^    int    write_and_go; \/** which state to go into after finishing current write *\/$/;"	m	struct:__anon2
wsize	memcached.h	/^    int    wsize;$/;"	m	struct:__anon2
